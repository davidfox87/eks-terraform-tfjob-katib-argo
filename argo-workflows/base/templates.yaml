apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: container-image
spec:
  serviceAccountName: workflow
  templates:
  - name: build-kaniko-git
    inputs:
      parameters:
      - name: repo_url
      - name: repo_ref
        value: refs/heads/main
      - name: repo_commit_id
        value: HEAD
      - name: container_image
      - name: container_tag
      - name: subfolder
    container:
      image: gcr.io/kaniko-project/executor:debug
      command: [/kaniko/executor]
      args:
      - --context={{inputs.parameters.repo_url}}#{{inputs.parameters.repo_ref}}#{{inputs.parameters.repo_commit_id}}
      - --context-sub-path={{inputs.parameters.subfolder}}
      - --destination={{inputs.parameters.container_image}}:{{inputs.parameters.container_tag}}
      volumeMounts:
        - name: regcred
          mountPath: /kaniko/.docker/

---


apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: promote
spec:
  serviceAccountName: workflow
  templates:
  - name: promote
    inputs:
      parameters:
      - name: subfolder
      - name: repo_owner
      - name: repo_name
      - name: image_owner
      - name: image_name
      - name: tag
    script:
      image: foxy7887/kustomize:v2
      command: [sh]
      source: |
        set -e
        git clone https://$(cat /.github/token)@github.com/{{inputs.parameters.repo_owner}}/{{inputs.parameters.repo_name}}
        git config --global user.email "davidmfox87@gmail.com"
        git config --global user.name "David Fox"
        cd {{inputs.parameters.repo_name}}/{{inputs.parameters.subfolder}}
        sleep 2
        echo BEFORE:
        cat kustomization.yaml
        echo AFTER:
        kustomize edit set image {{inputs.parameters.image_owner}}/{{inputs.parameters.image_name}}={{inputs.parameters.image_owner}}/{{inputs.parameters.image_name}}:{{inputs.parameters.tag}}
        cat kustomization.yaml
        git add kustomization.yaml
        git commit -m "Upgraded {{inputs.parameters.subfolder}}/kustomization.yaml with the tag {{inputs.parameters.tag}}"
        git push
      volumeMounts:
      - name: github-access
        mountPath: /.github/
      - name: sshkey
        readOnly: true
        # container will see /root/.ssh/id_rsa as usual:
        mountPath: /root/.ssh
      - name: known-hosts
        mountPath: /etc/ssh



---
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: cluster-workflow-template-ci
  annotations:
    workflows.argoproj.io/description: |
      This workflows builds and tests Argo Workflows.

      It demonstrates:

      * Cloning git repos
      * running unit tests
      * building docker images
      * Publishing test reports.
spec:
  arguments:
    parameters:
      - name: repo_owner
        value: "davidfox87"
      - name: repo_name
      - name: branch
        value: main
      - name: path
      - name: image
        value: foxy7887/xgb_train
      - name: tag
        value: v9999

  entrypoint: main

  volumeClaimTemplates:
  - metadata:
      name: workspace
    spec:
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: 64Mi

  serviceAccountName: workflow
  templates:
    - name: main
      dag:
        tasks:
          - name: clone
            template: clone
            arguments:
              parameters:
                - name: repo_owner
                  value: "{{workflow.parameters.repo_owner}}"
                - name: repo_name
                  value: "{{workflow.parameters.repo_name}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: flake8
            template: flake8
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            dependencies:
              - clone
          - name: pytest
            template: pytest
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            dependencies:
              - clone
          - name: list
            template: list
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
            dependencies:
              - flake8
              - pytest
          - name: build
            template: build
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
                - name: tag
                  value: "{{workflow.parameters.tag}}"
            dependencies:
              - list
          - name: promote-staging
            template: promote-staging
            arguments:
              parameters:
                - name: path
                  value: "{{workflow.parameters.path}}"
                - name: image
                  value: "{{workflow.parameters.image}}"
                - name: tag
                  value: "{{workflow.parameters.tag}}"
            dependencies:
              - build

    - name: clone
      inputs:
        parameters:
          - name: repo_owner
          - name: repo_name
          - name: branch
      container:
        volumeMounts:
          - mountPath: /app
            name: workspace
          - name: github-access
            mountPath: /.github/
          - name: sshkey
            readOnly: true
            mountPath: /root/.ssh
        image: alpine/git
        workingDir: /app
        command: [ sh, -c ]
        args:
          - |
            git clone -v -b "{{inputs.parameters.branch}}" --single-branch --depth 1 https://$(cat /.github/token)@github.com/{{inputs.parameters.repo_owner}}/{{inputs.parameters.repo_name}} .

    - name: list
      inputs:
        parameters:
          - name: path
      container:
        image: alpine/git
        volumeMounts:
          - mountPath: /app
            name: workspace
        workingDir: /app/{{inputs.parameters.path}}
        command: [sh, -c]
        args: ["git status && ls"]

    - name: flake8
      inputs:
        parameters:
          - name: path
      container:
        image: python:3.9
        command: [sh, -c]
        args: 
        - |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        volumeMounts:
        - name: workspace
          mountPath: /app
        workingDir: /app/{{inputs.parameters.path}}
    - name: pytest
      inputs:
        parameters:
        - name: path
      container:
        image: "python:3.9"
        command: [sh, -c]
        args: 
        - |
          pip install pytest pytest-cov coverage
          pytest --cov=app/ --cov-report=xml
        volumeMounts:
        - name: workspace
          mountPath: /app
        workingDir: /app/{{inputs.parameters.path}}

    - name: build
      inputs:
        parameters:
          - name: path
          - name: image
          - name: tag
      volumes:
        - name: docker-config
          secret:
            secretName: regcred
            items:
              - key: .dockerconfigjson
                path: config.json
      container:
        image: moby/buildkit:v0.10.5-rootless
        volumeMounts:
          - name: workspace
            mountPath: /app
          - name: docker-config
            mountPath: /.docker
        workingDir: /app/{{inputs.parameters.path}}
        env:
          - name: BUILDKITD_FLAGS
            value: --oci-worker-no-process-sandbox
          - name: DOCKER_CONFIG
            value: /.docker
        command: 
          - buildctl-daemonless.sh
        args: 
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile=.
          - --output
          - type=image,name={{inputs.parameters.image}}:{{inputs.parameters.tag}},push=true

    - name: promote-staging
      inputs:
        parameters:
          - name: path
          - name: image
          - name: tag
      volumes:
        - name: github-access
          secret:
            secretName: github-access
            items:
              - key: token
                path: token
      container:
        image: foxy7887/kustomize:v2
        volumeMounts:
          - name: workspace
            mountPath: /app
          - name: github-access
            mountPath: /.github/
        workingDir: /app/{{inputs.parameters.path}}
        command: [sh, -c]
        args: 
        - |  
          set -e
          cd ../base
          git config --global user.email "davidmfox87@gmail.com"
          git config --global user.name "David Fox"
          cat kustomization.yaml
          kustomize edit set image {{inputs.parameters.image}}={{inputs.parameters.image}}:{{inputs.parameters.tag}}
          cat kustomization.yaml
          git add kustomization.yaml
          git commit -m "Upgraded kustomization.yaml with the tag {{inputs.parameters.tag}}"
          git push